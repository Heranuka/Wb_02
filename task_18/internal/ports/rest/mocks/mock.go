// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go

// Package mock_rest is a generated GoMock package.
package mock_rest

import (
	context "context"
	reflect "reflect"
	domain "test_18/internal/domain"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockEventHandler is a mock of EventHandler interface.
type MockEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockEventHandlerMockRecorder
}

// MockEventHandlerMockRecorder is the mock recorder for MockEventHandler.
type MockEventHandlerMockRecorder struct {
	mock *MockEventHandler
}

// NewMockEventHandler creates a new mock instance.
func NewMockEventHandler(ctrl *gomock.Controller) *MockEventHandler {
	mock := &MockEventHandler{ctrl: ctrl}
	mock.recorder = &MockEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventHandler) EXPECT() *MockEventHandlerMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockEventHandler) CreateEvent(ctx context.Context, event domain.Event) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, event)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventHandlerMockRecorder) CreateEvent(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEventHandler)(nil).CreateEvent), ctx, event)
}

// DeleteEvent mocks base method.
func (m *MockEventHandler) DeleteEvent(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockEventHandlerMockRecorder) DeleteEvent(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockEventHandler)(nil).DeleteEvent), ctx, id)
}

// GetEventsForTime mocks base method.
func (m *MockEventHandler) GetEventsForTime(ctx context.Context, startDate, endDate time.Time) ([]domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsForTime", ctx, startDate, endDate)
	ret0, _ := ret[0].([]domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsForTime indicates an expected call of GetEventsForTime.
func (mr *MockEventHandlerMockRecorder) GetEventsForTime(ctx, startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsForTime", reflect.TypeOf((*MockEventHandler)(nil).GetEventsForTime), ctx, startDate, endDate)
}

// UpdateEvent mocks base method.
func (m *MockEventHandler) UpdateEvent(ctx context.Context, id int, req domain.UpdateEventRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", ctx, id, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockEventHandlerMockRecorder) UpdateEvent(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockEventHandler)(nil).UpdateEvent), ctx, id, req)
}
